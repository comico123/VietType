<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) Dinh Ngoc Tu.

This file is part of VietType.

VietType is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

VietType is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with VietType.  If not, see <https://www.gnu.org/licenses/>.
-->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product
    Id="*"
    Name="VietType"
    Language="!(bind.fileLanguage.VietTypeATL32.dll)"
    Version="!(bind.fileVersion.VietTypeATL32.dll)"
    Manufacturer="Dinh Ngoc Tu"
    UpgradeCode="e00ac838-881d-4301-aac5-0a723bb0b0ef">
    
    <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />

    <MajorUpgrade
      DowngradeErrorMessage="A newer version of [ProductName] is already installed."
      Schedule="afterInstallInitialize" />
    <MediaTemplate EmbedCab="yes" />

    <Feature Id="ProductFeature" Title="VietType" Level="1" Absent="disallow" AllowAdvertise="no">
      <ComponentGroupRef Id="ProductComponents" />
      <ComponentGroupRef Id="ShortcutComponents" />
    </Feature>

    <Feature Id="DebugSymbolsFeature" Title="Debug symbols" Level="10" AllowAdvertise="no">
      <ComponentGroupRef Id="DebugSymbols" />
    </Feature>

    <UIRef Id="WixUI_FeatureTree" />
    <WixVariable Id="WixUILicenseRtf" Value="$(var.SolutionDir)\LICENSE.rtf" />

    <Condition Message="VietType is only compatible with Windows 8 and newer.">Installed OR (VersionNT >= 602)</Condition>

    <?if $(var.Platform) = x86 ?>
    <Condition Message="32-bit setup can only run on a 32-bit OS.">Installed OR (NOT VersionNT64)</Condition>
    <?endif ?>

    <SetProperty Id="RegisterCategories" Value='"[#Registrar.exe]" 0 0' After="CostFinalize" Sequence="execute" />
    <SetProperty Id="RegisterCategoriesRollback" Value='"[#Registrar.exe]" 1 0' After="CostFinalize" Sequence="execute" />
    <SetProperty Id="UnregisterCategories" Value='"[#Registrar.exe]" 1 0' After="CostFinalize" Sequence="execute" />
    <SetProperty Id="UnregisterCategoriesRollback" Value='"[#Registrar.exe]" 0 0' After="CostFinalize" Sequence="execute" />

    <SetProperty Id="RegisterProfiles" Value='"[#Registrar.exe]" 0 1' After="CostFinalize" Sequence="execute" />
    <SetProperty Id="RegisterProfilesRollback" Value='"[#Registrar.exe]" 1 1' After="CostFinalize" Sequence="execute" />
    <SetProperty Id="UnregisterProfiles" Value='"[#Registrar.exe]" 1 1' After="CostFinalize" Sequence="execute" />
    <SetProperty Id="UnregisterProfilesRollback" Value='"[#Registrar.exe]" 0 1' After="CostFinalize" Sequence="execute" />

    <SetProperty Id="ActivateProfiles" Value='"[#Registrar.exe]" 0 2' After="CostFinalize" Sequence="execute" />
    <SetProperty Id="DeactivateProfiles" Value='"[#Registrar.exe]" 1 2' After="CostFinalize" Sequence="execute" />

    <InstallExecuteSequence>
      <Custom Action="RegisterCategoriesRollback" After="InstallFiles">(NOT Installed) OR REINSTALL</Custom>
      <Custom Action="RegisterCategories" After="RegisterCategoriesRollback">(NOT Installed) OR REINSTALL</Custom>
      <Custom Action="RegisterProfilesRollback" After="RegisterCategories">(NOT Installed) OR REINSTALL</Custom>
      <Custom Action="RegisterProfiles" After="RegisterProfilesRollback">(NOT Installed) OR REINSTALL</Custom>

      <Custom Action="UnregisterProfilesRollback" After="InstallInitialize">REMOVE OR REINSTALL</Custom>
      <Custom Action="UnregisterProfiles" After="UnregisterProfilesRollback">REMOVE OR REINSTALL</Custom>
      <Custom Action="UnregisterCategoriesRollback" After="UnregisterProfiles">REMOVE OR REINSTALL</Custom>
      <Custom Action="UnregisterCategories" After="UnregisterCategoriesRollback">REMOVE OR REINSTALL</Custom>
    </InstallExecuteSequence>
  </Product>
  
  <!-- ################################################################################ -->
  <!-- install paths -->

  <?if $(var.Platform) = x86 ?>
  <?define PlatformProgramFilesFolder = "ProgramFilesFolder" ?>
  <?elseif $(var.Platform) = x64 ?>
  <?define PlatformProgramFilesFolder = "ProgramFiles64Folder" ?>
  <?else ?>
  <?error Unknown architecture ?>
  <?endif ?>

  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="$(var.PlatformProgramFilesFolder)">
        <Directory Id="INSTALLFOLDER" Name="VietType" />
      </Directory>
    </Directory>
  </Fragment>

  <!-- ################################################################################ -->
  <!-- main files -->

  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <Component Id="VietTypeATL32">
        <File Id="VietTypeATL32.dll" Source="$(var.SolutionDir)\Win32\Release\VietTypeATL32.dll" Name="VietTypeATL32.dll">
          <Class Id="{C0DD01A1-0DEB-454B-8B42-D22CED1B4B23}" Context="InprocServer32" Description="VietType" ThreadingModel="apartment" />
        </File>
      </Component>

      <?if $(var.Platform) = x64 ?>
      <Component Id="VietTypeATL64">
        <File Id="VietTypeATL64.dll" Source="$(var.SolutionDir)\x64\Release\VietTypeATL64.dll" Name="VietTypeATL64.dll">
          <Class Id="{C0DD01A1-0DEB-454B-8B42-D22CED1B4B23}" Context="InprocServer32" Description="VietType" ThreadingModel="apartment" />
        </File>
      </Component>
      <?endif ?>

      <?if $(var.Platform) = x86 ?>
      <Component Id="Registrar">
        <File Id="Registrar.exe" Source="$(var.SolutionDir)\Win32\Release\Registrar.exe" Name="Registrar.exe" />
      </Component>
      <?elseif $(var.Platform) = x64 ?>
      <Component Id="Registrar">
        <File Id="Registrar.exe" Source="$(var.SolutionDir)\x64\Release\Registrar.exe" Name="Registrar.exe" />
      </Component>
      <?else ?>
      <?error Unknown architecture ?>
      <?endif ?>

      <Component Id="LICENSE">
        <File Id="LICENSE" Source="$(var.SolutionDir)\LICENSE" Name="LICENSE" />
      </Component>
    </ComponentGroup>
  </Fragment>

  <!-- ################################################################################ -->
  <!-- shortcuts -->

  <Fragment>
    <DirectoryRef Id="TARGETDIR">
      <Directory Id="ProgramMenuFolder">
        <Directory Id="ShortcutFolder" Name="VietType" />
      </Directory>
    </DirectoryRef>
  </Fragment>

  <Fragment>
    <ComponentGroup Id="ShortcutComponents" Directory="ShortcutFolder">
      <Component Id="Shortcuts">
        <Shortcut Id="ActivateShortcut" Name="Enable VietType" Target="[!Registrar.exe]" Arguments="0 2" WorkingDirectory="INSTALLFOLDER" />
        <Shortcut Id="DeactivateShortcut" Name="Disable VietType" Target="[!Registrar.exe]" Arguments="1 2" WorkingDirectory="INSTALLFOLDER" />
        <RemoveFolder Id="CleanupShortcuts" On="uninstall" />
        <RegistryValue Root="HKCU" Key="Software\VietType" Name="RegistrarShortcut" Type="integer" Value="1" KeyPath="yes" />
      </Component>
    </ComponentGroup>
  </Fragment>

  <!-- ################################################################################ -->
  <!-- symbols -->

  <Fragment>
    <ComponentGroup Id="DebugSymbols" Directory="INSTALLFOLDER">
      <Component Id="Symbols32">
        <File Id="VietTypeATL32.pdb" Source="$(var.SolutionDir)\Win32\Release\VietTypeATL32.pdb" Name="VietTypeATL32.pdb" />
      </Component>

      <?if $(var.Platform) = x64 ?>
      <Component Id="Symbols64">
        <File Id="VietTypeATL64.pdb" Source="$(var.SolutionDir)\x64\Release\VietTypeATL64.pdb" Name="VietTypeATL64.pdb" />
      </Component>
      <?endif ?>
    </ComponentGroup>
  </Fragment>

  <!-- ################################################################################ -->
  <!-- custom actions -->

  <Fragment>
    <?if $(var.Platform) = x86 ?>
    <CustomAction Id="RegisterCategories" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="no" Execute="deferred" />
    <CustomAction Id="RegisterCategoriesRollback" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="no" Execute="rollback" />
    <CustomAction Id="UnregisterCategories" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="no" Execute="deferred" />
    <CustomAction Id="UnregisterCategoriesRollback" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="no" Execute="rollback" />

    <CustomAction Id="RegisterProfiles" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="no" Execute="deferred" />
    <CustomAction Id="RegisterProfilesRollback" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="no" Execute="rollback" />
    <CustomAction Id="UnregisterProfiles" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="no" Execute="deferred" />
    <CustomAction Id="UnregisterProfilesRollback" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="no" Execute="rollback" />

    <CustomAction Id="ActivateProfiles" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="yes" Execute="deferred" Return="ignore" />
    <!-- since DeactivateProfiles is called during uninstall, we should use ignore instead of asyncNoWait -->
    <CustomAction Id="DeactivateProfiles" BinaryKey="WixCA" DllEntry="WixQuietExec" Impersonate="yes" Execute="deferred" Return="ignore" />
    
    <?elseif $(var.Platform) = x64 ?>
    <CustomAction Id="RegisterCategories" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="no" Execute="deferred" />
    <CustomAction Id="RegisterCategoriesRollback" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="no" Execute="rollback" />
    <CustomAction Id="UnregisterCategories" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="no" Execute="deferred" />
    <CustomAction Id="UnregisterCategoriesRollback" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="no" Execute="rollback" />

    <CustomAction Id="RegisterProfiles" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="no" Execute="deferred" />
    <CustomAction Id="RegisterProfilesRollback" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="no" Execute="rollback" />
    <CustomAction Id="UnregisterProfiles" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="no" Execute="deferred" />
    <CustomAction Id="UnregisterProfilesRollback" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="no" Execute="rollback" />

    <CustomAction Id="ActivateProfiles" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="yes" Execute="deferred" Return="ignore" />
    <CustomAction Id="DeactivateProfiles" BinaryKey="WixCA" DllEntry="WixQuietExec64" Impersonate="yes" Execute="deferred" Return="ignore" />
    
    <?else ?>
    <?error Unknown architecture ?>
    <?endif ?>
  </Fragment>
</Wix>
